"""
Script para criar execut√°vel do Tibia Bot usando PyInstaller
Execute este script para gerar um arquivo .exe standalone
"""

import subprocess
import sys
import os
from pathlib import Path

def install_pyinstaller():
    """Instala PyInstaller se n√£o estiver instalado"""
    try:
        import PyInstaller
        print("PyInstaller j√° est√° instalado")
    except ImportError:
        print("Instalando PyInstaller...")
        subprocess.check_call([sys.executable, "-m", "pip", "install", "pyinstaller"])

def build_executable():
    """Constr√≥i o execut√°vel"""
    print("Construindo execut√°vel do Tibia Bot...")
    
    # Comandos do PyInstaller
    cmd = [
        "pyinstaller",
        "--onefile",                    # Arquivo √∫nico
        "--windowed",                   # Sem console (GUI)
        "--name=TibiaBot",              # Nome do execut√°vel
        "--icon=assets/icon.ico",       # √çcone (se existir)
        "--add-data=config;config",     # Incluir pasta config
        "--add-data=assets;assets",     # Incluir pasta assets
        "--add-data=scripts;scripts",   # Incluir pasta scripts
        "--hidden-import=cv2",          # Imports ocultos
        "--hidden-import=numpy",
        "--hidden-import=PIL",
        "--hidden-import=pyautogui",
        "--hidden-import=mss",
        "--hidden-import=tkinter",
        "main.py"                       # Arquivo principal
    ]
    
    try:
        # Verificar se arquivo icon existe
        if not Path("assets/icon.ico").exists():
            # Remover par√¢metro do √≠cone se n√£o existir
            cmd = [c for c in cmd if not c.startswith("--icon=")]
        
        subprocess.run(cmd, check=True)
        print("\n‚úÖ Execut√°vel criado com sucesso!")
        print("üìÅ Localiza√ß√£o: dist/TibiaBot.exe")
        print("\nüìã Para distribuir:")
        print("1. Copie o arquivo TibiaBot.exe da pasta 'dist'")
        print("2. Copie as pastas 'config', 'assets' e 'scripts'")
        print("3. Inclua o manual MANUAL_INSTALACAO.md")
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao criar execut√°vel: {e}")
        return False
    
    return True

def create_installer():
    """Cria script de instala√ß√£o simples"""
    installer_content = '''@echo off
echo =================================
echo    TIBIA BOT - INSTALADOR
echo =================================
echo.

echo Verificando Python...
python --version >nul 2>&1
if errorlevel 1 (
    echo ‚ùå Python n√£o encontrado!
    echo Por favor, instale Python 3.11+ primeiro
    echo Download: https://www.python.org/downloads/
    pause
    exit /b 1
)

echo ‚úÖ Python encontrado!
echo.

echo Instalando depend√™ncias...
pip install -r requirements.txt

if errorlevel 1 (
    echo ‚ùå Erro ao instalar depend√™ncias
    pause
    exit /b 1
)

echo ‚úÖ Instala√ß√£o conclu√≠da!
echo.
echo Para executar o bot, use:
echo python main.py
echo.
pause
'''
    
    with open("instalar.bat", "w", encoding="utf-8") as f:
        f.write(installer_content)
    
    print("‚úÖ Arquivo 'instalar.bat' criado!")

def main():
    """Fun√ß√£o principal"""
    print("ü§ñ TIBIA BOT - CONSTRUTOR DE EXECUT√ÅVEL")
    print("=" * 50)
    
    opcao = input("\nEscolha uma op√ß√£o:\n"
                  "1. Criar execut√°vel (.exe)\n"
                  "2. Criar instalador (.bat)\n"
                  "3. Ambos\n"
                  "Op√ß√£o (1-3): ")
    
    if opcao in ["1", "3"]:
        install_pyinstaller()
        if not build_executable():
            return
    
    if opcao in ["2", "3"]:
        create_installer()
    
    print("\nüéâ Processo conclu√≠do!")
    print("\nüìã Pr√≥ximos passos:")
    print("1. Teste o execut√°vel antes de distribuir")
    print("2. Inclua todos os arquivos necess√°rios")
    print("3. Teste em outro computador")

if __name__ == "__main__":
    main()